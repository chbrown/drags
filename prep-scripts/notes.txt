import wave
import audioop
lot_wave = wave.open('lot.wav')
lot_wave.getparams()
lot_wave.getnchannels()
byte_string = lot_wave.readframes(lot_wave.getnframes())
len(byte_string)
lot_wave.getnframes()
reversed = audioop.reverse(byte_string, 25600)
reversed = audioop.reverse(byte_string, 1)
reversed[0:4]
wave_out = wave.write('lot-reversed.wav')
wave_out = wave.open('lot-reversed.wav')
wave_out = wave.open('lot-reversed.wav', 'w')
wave_out.write(reversed)
wave_out.writeframes(reversed)
wave_out.setnchannels(1)
wave_out.writeframes(reversed)
lot_wave.getsampwidth()
wave_out.setsampwidth(2)
wave_out.writeframes(reversed)
lot_wave.getframerate()
wave_out.setframerate(44100)
wave_out.writeframes(reversed)
wave_out.close()
reversed = audioop.reverse(byte_string, 2)
wave_out = wave.open('lot-reversed-2.wav', 'w')
wave_out.setnchannels(1)
wave_out.setsampwidth(2)
wave_out.writeframes(reversed)
wave_out.setframerate(44100)
wave_out.writeframes(reversed)
wave_out.close()
wave_out = wave.open('lot-reversed-3.wav', 'w')
wave_out.setnchannels(1)
wave_out.setframerate(44100)
wave_out.setsampwidth(2)
reversed with spacers = '\0'*25600 + reversed + '\0'*25600
reversed_with_spacers = '\0'*25600 + reversed + '\0'*25600
wave_out.writeframes(reversed_with_spacers)
wave_out.close()
lot_right = wave.open('lot-stereo-right-echo.wav')
stereo_params = lot_right.getparams()
stereo_params
import console
os.popen('stty size', 'r').read().split()
os.environ["COLUMNS"]







    # samples is now the length of frames / sample_width, and full of integers
    # maxxed = [None]*sample_count
    # for i in range(sample_count):
    #     # if i == 0:
    #     #     smoothed[i] = samples[i]
    #     # else:
    #     #     smoothed[i] = (smoothing_factor * samples[i-1]) + ((1 - smoothing_factor) * smoothed[i-1])
    # 
    #     indices = range(i - window, i + window + 1)
    #     # count = len(indices)
    #     sample_max = max([abs(samples[index % sample_count]) for index in indices])
    #     maxxed[i] = sample_max # int(sample_sum / count)








    # [None]*sample_count
    # for i in range(sample_count):
    #     indices = range(i - window, i + window + 1)
    #     count = len(indices)
    #     sample_sum = sum([maxxed[index % sample_count] for index in indices])
    #     smoothed[i] = int(sample_sum / count)

    # for k in range(sample_count):
        # if samples[k] != smoothed[k]:
            # print '%d -> %d' % (samples[k], smoothed[k])
        # if k > 10000:
            # break









        # if smoothed[j] >= 0:
        #     sign = 0
        # else:
        #     sign = -1
        # big_byte = (smoothed[j] >> 8) << 8
        # try:
        #     smoothed_frames[j] = struct.pack("<bb", big_byte, smoothed[j] - big_byte)
        # except Exception, ex:
        #     print big_byte, smoothed[j]
        #     raise ex






        
    # for l in range(sample_count):
    #     byte_index = l * sample_width
    #     if frames[byte_index:(byte_index + sample_width)] != smoothed_frame_str[byte_index:(byte_index + sample_width)]:
    #         print '%d -> %d' % (samples[l], smoothed[l]) 
    #         print repr(frames[byte_index:(byte_index + sample_width)]), repr(smoothed_frame_str[byte_index:(byte_index + sample_width)])
    # print repr(smoothed_frame_str[0:100])
    


        # print sample_value, '>', repr(sample_bytes), '->', struct.unpack("<bb", sample_bytes), '=', real_sample
        # sample_bytes = struct.pack("<h", sample_value)

        # print '%s -> %d, %d (%d) = %d = %s' % (repr(sample), ord(sample[0]), ord(sample[1]), long_val, real_sample, repr(str_val))
        # print repr(sample)

